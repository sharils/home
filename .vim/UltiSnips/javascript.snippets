extends all, common, clike, javalike, regex, strictequal, boolean

global !p
from my_snippet_helpers import *
endglobal


priority 5

snippet "export " "import from" r
export ${2:{ default as `!p snip.rv = importname(t[1])` }}$3 from "$1";
endsnippet

snippet . "../" "around_import(snip)" ie
../
endsnippet

snippet ... "../../" "around_import(snip)" ie
../../
endsnippet

snippet .... "../../../" "around_import(snip)" ie
../../../
endsnippet

snippet ../ "../" "around_import(snip)" ie
../../
endsnippet

snippet < "(?<>)" "around_regex(snip)" ie
(?<$1>$2)
endsnippet

snippet d "default" "around_export(snip)" we
default $0
endsnippet

snippet i "if else throw" "around_catch(snip)" we
if ($1) {
	${2:${VISUAL}}
} else {
	throw e;
}
endsnippet

snippet l "let idx = 0; idx < length; idx++" "around_for(snip)" we
let `!p snip.rv = singularize_idx(t[1])` = 0; `!p snip.rv = singularize_idx(t[1])` < $1.length; `!p snip.rv = singularize_idx(t[1])`++
endsnippet


priority 4

snippet /^i/ "import" r
import $0
endsnippet


priority 3

snippet con "constructor" w
constructor
endsnippet

snippet copy "const copy = () => {}" w
const copy = (d, data) => {
	d.addEventListener(
		"copy",
		e => {
			e.preventDefault();
			e.clipboardData.clearData();
			e.clipboardData.setData("text/plain", data);
		},
		{ once: true }
	);
	d.execCommand("copy");
};
endsnippet

snippet e "export" b
export $0
endsnippet

snippet su "super" b
super($1);
endsnippet

snippet "import " "import from" r
import ${2:`!p snip.rv = importname(t[1])`}$3 from "$1";
endsnippet

snippet j "javascript:" b
javascript:
endsnippet

snippet l "let" b
let $0
endsnippet

snippet us "use strict" b
"use strict";
endsnippet


priority 2

snippet / "//" w
/$1/
endsnippet

snippet a "await" w
await $0
endsnippet

snippet as "async" w
async $0
endsnippet

snippet c "const" w
const $0
endsnippet

snippet cat "catch" w
 catch (${2:e}) {
	${1:// eslint-disable-next-line no-console
	console.error(e);
	throw e;}
}
endsnippet

snippet ci "in" w
const `!p snip.rv = singularize_idx(t[1])` in $1
endsnippet

snippet d "debugger" w
debugger
endsnippet

snippet fn "function" w
function $1($2) {$3}
endsnippet

snippet i "iife" w
(v => { ${1:debugger}; return v; })(${VISUAL})
endsnippet

snippet iife "iife" w
(async () => {
	try {
		${1:${VISUAL}}
	} catch (e) {$2
		console.error(${4:"`jot -cr 20 48 90 | tr -d ':;<=>?@ILOU\n' | head -c4``>?@ILOU\n' | head -c4`"}$3)
	}
})();
endsnippet

snippet ins "instanceof" w
instanceof $0
endsnippet

snippet nu "number" w
number
endsnippet

snippet nan "nan" w
NaN
endsnippet

snippet o "object" w
object
endsnippet

snippet of "in" w
const `!p snip.rv = singularize(t[1])` of $1
endsnippet

snippet ots "toString" w
toString = () => {
	$1
};
endsnippet

snippet ovo "valueOf" w
valueOf = () => {
	$1
};
endsnippet

snippet pr "prototype" w
prototype
endsnippet

snippet to "typeof" w
typeof $0
endsnippet

snippet u "undefined" w
undefined
endsnippet

snippet y "yield" w
yield $0
endsnippet

snippet y* "yield" Aw
yield* $0
endsnippet


priority 1

snippet $ "${var}" i
${$1}
endsnippet

snippet . "..." i
...
endsnippet

snippet - "=>" i
($1) => {$2}
endsnippet
